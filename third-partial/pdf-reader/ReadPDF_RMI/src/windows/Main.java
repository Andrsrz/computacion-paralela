/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package windows;

import client.Client;
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.UnknownHostException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.util.PDFTextStripper;
import server.Server;
import server.ServerInterface;

class MyCustomFilter extends javax.swing.filechooser.FileFilter {
    @Override
    public boolean accept(File file) {
        // Allow only directories, or files with ".txt" extension
        return file.isDirectory() || file.getAbsolutePath().endsWith(".pdf");
    }
    @Override
    public String getDescription() {
        // This description will be displayed in the dialog,
        // hard-coded = ugly, should be done via I18N
        return "Text documents (*.pdf)";
    }
}

/**
 *
 * @author andrsrz
 */
public class Main extends javax.swing.JFrame {
    
    private Client client;
    private ServerInterface server, serverIni;

    /**
     * Creates new form Main
     */
    public Main() throws UnknownHostException {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("PDF Reader");
        this.setResizable(false);
        jTextField_ServerIP.setText(InetAddress.getLocalHost().getHostAddress().toString());
        
        try{
            // rmiregistry
            LocateRegistry.createRegistry(Integer.parseInt(jTextField_Port.getText()));

            // New server object
            serverIni = new Server();
            Naming.rebind("rmi://" 
                    + jTextField_ServerIP.getText() 
                    + ":" 
                    + jTextField_Port.getText() 
                    + "/Chat", serverIni);
            jTextArea_Server.setText("Server Ready...");
        } catch (Exception e){
            jTextArea_Server.setText("Server Failed... " + e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_FileName = new javax.swing.JTextArea();
        jButton_StartConc = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField_Find = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea_Conc = new javax.swing.JTextArea();
        jTextField_CoreNums = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField_ServerIP = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField_Port = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea_Server = new javax.swing.JTextArea();
        jMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_Open = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();

        jFileChooser.setDialogTitle("Please select a file");
        jFileChooser.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea_FileName.setColumns(20);
        jTextArea_FileName.setRows(5);
        jTextArea_FileName.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea_FileName);

        jButton_StartConc.setText("Start");
        jButton_StartConc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_StartConcActionPerformed(evt);
            }
        });

        jLabel1.setText("FilePath");

        jLabel2.setText("Word to find");

        jTextArea_Conc.setColumns(20);
        jTextArea_Conc.setRows(5);
        jTextArea_Conc.setFocusable(false);
        jScrollPane2.setViewportView(jTextArea_Conc);

        jLabel3.setText("Th Num");

        jLabel4.setText("Server IP");

        jTextField_ServerIP.setText("192.168.0.12");

        jLabel5.setText("Port");

        jTextField_Port.setText("1234");

        jTextArea_Server.setColumns(20);
        jTextArea_Server.setRows(5);
        jTextArea_Server.setFocusable(false);
        jScrollPane3.setViewportView(jTextArea_Server);

        jMenu1.setText("File");

        jMenuItem_Open.setText("Open");
        jMenuItem_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_OpenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_Open);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar.add(jMenu1);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField_Find))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton_StartConc)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField_CoreNums, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField_Port)
                                    .addComponent(jTextField_ServerIP, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField_Find, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton_StartConc)
                            .addComponent(jTextField_CoreNums, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField_ServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField_Port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_OpenActionPerformed
        // TODO add your handling code here:
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == jFileChooser.APPROVE_OPTION) {
            File file = jFileChooser.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            if (jTextArea_FileName.getText().equals("")) {
                jTextArea_FileName.setText(file.getAbsolutePath());
            } else if (!jTextArea_FileName.getText().equals("")) {
                jTextArea_FileName.setText(jTextArea_FileName.getText() + ":" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jMenuItem_OpenActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jButton_StartConcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_StartConcActionPerformed
        // TODO add your handling code here:
        
        if (!jTextArea_FileName.getText().equals("")) {
            try {
                int coresNum = 0;
                if (!jTextField_CoreNums.getText().equals("")) {
                    coresNum = Integer.parseInt(jTextField_CoreNums.getText());
                    jTextArea_Conc.setText("I'll create "
                       + String.valueOf(coresNum)
                       + " threads.");
                } else {
                    coresNum = Runtime.getRuntime().availableProcessors();
                    jTextArea_Conc.setText("You have " 
                       + String.valueOf(coresNum)
                       + " cores in your computer."
                       + "\nSo I'll create "
                       + String.valueOf(coresNum)
                       + " threads.");
                }
                
                String allText = jTextArea_FileName.getText();
                String[] parts = allText.split(":");
                
                if (parts.length > 1) {
                    try {
                        int i = 1;
                        for (String part : parts) {
                            client = new Client("Client" + String.valueOf(i));
                            client.setUI(this);
                            server = (ServerInterface)Naming.lookup("rmi://" 
                                    + jTextField_ServerIP.getText() 
                                    + ":" 
                                    + jTextField_Port.getText()
                                    + "/Chat");
                            
                            server.login(client);
                            
                            int eachPages = 0;
                            int[] cores = new int[coresNum];
                            MyThread[] threads = new MyThread[coresNum];
                            PDDocument doc;
                            doc = PDDocument.load(new File(part));
                            int count = doc.getNumberOfPages();
                            int count2 = doc.getNumberOfPages();

                            for (int x = 0; x < cores.length; x++) {
                                int y = x+1;
                                cores[x] = y;
                            }

                            if (count%2 == 0) {
                                eachPages = count / coresNum;
                            } else if(count%2 != 0) {
                                count = count+1;
                                eachPages = count / coresNum;
                            }

                            for (int core : cores) {
                                MyThread thread = new MyThread();
                                thread.setThNumber(core);
                                thread.setDoc(part);
                                thread.setWord(jTextField_Find.getText());
                                thread.setTime(0);

                                for (int core2 : cores) {
                                    if (core2 == core) {
                                        if (core2 == 1) {
                                            thread.setStartPage(1);
                                            thread.setStopPage(eachPages);
                                            eachPages += eachPages;
                                        } else {
                                            thread.setStartPage(eachPages-(count/coresNum));
                                            thread.setStopPage(eachPages);
                                            eachPages += (count/coresNum);
                                        }
                                    }
                                }

                                threads[core-1] = thread;
                                thread.start();
                            }

                            jTextArea_Conc.setText(jTextArea_Conc.getText()
                                    + "\nThis book has "
                                    + String.valueOf(count2)
                                    + " pages.");

                            doc.close();

                            SetInfo(threads, jTextArea_Conc.getText());
                            i++;
                        }
                    } catch (MalformedURLException | NotBoundException | RemoteException e) {
                        JOptionPane.showMessageDialog(this, "Connection Error.");
                        System.out.print(e);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            jTextArea_Conc.setText("Please select a file first!.");
        }
    }//GEN-LAST:event_jButton_StartConcActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Main().setVisible(true);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    public void writeMessage (String message) {
        jTextArea_Server.setText(jTextArea_Server.getText() + "\n" + message);
    }
    
    private void SetInfo (MyThread[] threads, String text){
        jTextArea_Conc.setText(text);
        int count = 0;
        for (MyThread thread : threads) {
            // jTextArea_Conc.setText(text);
            if (thread.isAlive()) {
                synchronized(this){
                    try {
                        wait(10);
                        SetInfo(threads, text);
                        break;
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                jTextArea_Conc.setText(jTextArea_Conc.getText()
                        + "\nThread " 
                        + thread.getThNumber()
                        + " has ended in "
                        + thread.getTime()
                        + " sec.");
                
                if (!thread.getWord().equals("")) {
                    jTextArea_Conc.setText(jTextArea_Conc.getText()
                            + "\nThread " 
                            + thread.getThNumber()
                            + " has counted the word '"
                            + thread.getWord()
                            + "' "
                            + thread.getWordAppearance()
                            + " times.");
                } else {
                    jTextArea_Conc.setText(jTextArea_Conc.getText()
                            + "\nThread " 
                            + thread.getThNumber()
                            + " has counted "
                            + thread.getWordAppearance()
                            + " words");
                }
                
                count = count + thread.getWordAppearance();
            }
        }
        
        jTextArea_Conc.setText(jTextArea_Conc.getText()
                + "\nThis books has "
                + count
                + " words.");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_StartConc;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItem_Open;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea_Conc;
    private javax.swing.JTextArea jTextArea_FileName;
    private javax.swing.JTextArea jTextArea_Server;
    private javax.swing.JTextField jTextField_CoreNums;
    private javax.swing.JTextField jTextField_Find;
    private javax.swing.JTextField jTextField_Port;
    private javax.swing.JTextField jTextField_ServerIP;
    // End of variables declaration//GEN-END:variables
}
