/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package windows;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.util.PDFTextStripper;
import java.lang.Thread;

class MyCustomFilter extends javax.swing.filechooser.FileFilter {
    @Override
    public boolean accept(File file) {
        // Allow only directories, or files with ".txt" extension
        return file.isDirectory() || file.getAbsolutePath().endsWith(".pdf");
    }
    @Override
    public String getDescription() {
        // This description will be displayed in the dialog,
        // hard-coded = ugly, should be done via I18N
        return "Text documents (*.pdf)";
    }
}

/**
 *
 * @author andrsrz
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("PDF Reader");
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_FileName = new javax.swing.JTextArea();
        jLabel_Conc = new javax.swing.JLabel();
        jLabel_Sec = new javax.swing.JLabel();
        jLabel_ConcTime = new javax.swing.JLabel();
        jLabel_SecTime = new javax.swing.JLabel();
        jButton_StartConc = new javax.swing.JButton();
        jButton_StartSec = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField_Find = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea_Conc = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea_Sec = new javax.swing.JTextArea();
        jTextField_CoreNums = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_Open = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();

        jFileChooser.setDialogTitle("Please select a file");
        jFileChooser.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea_FileName.setColumns(20);
        jTextArea_FileName.setRows(5);
        jTextArea_FileName.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea_FileName);

        jLabel_Conc.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel_Conc.setText("Concurrente");

        jLabel_Sec.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel_Sec.setText("Secuencial");

        jLabel_ConcTime.setText("time");

        jLabel_SecTime.setText("time");

        jButton_StartConc.setText("Start");
        jButton_StartConc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_StartConcActionPerformed(evt);
            }
        });

        jButton_StartSec.setText("Start");
        jButton_StartSec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_StartSecActionPerformed(evt);
            }
        });

        jLabel1.setText("FilePath");

        jLabel2.setText("Word to find");

        jTextArea_Conc.setColumns(20);
        jTextArea_Conc.setRows(5);
        jTextArea_Conc.setFocusable(false);
        jScrollPane2.setViewportView(jTextArea_Conc);

        jTextArea_Sec.setColumns(20);
        jTextArea_Sec.setRows(5);
        jTextArea_Sec.setFocusable(false);
        jScrollPane3.setViewportView(jTextArea_Sec);

        jLabel3.setText("Th Num");

        jMenu1.setText("File");

        jMenuItem_Open.setText("Open");
        jMenuItem_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_OpenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_Open);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar.add(jMenu1);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField_Find))
                            .addComponent(jScrollPane1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel_Conc)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton_StartConc))
                                    .addComponent(jLabel_ConcTime))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jTextField_CoreNums, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_SecTime)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel_Sec)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_StartSec))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField_Find, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Conc)
                    .addComponent(jButton_StartConc)
                    .addComponent(jLabel_Sec)
                    .addComponent(jButton_StartSec)
                    .addComponent(jTextField_CoreNums, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_ConcTime)
                    .addComponent(jLabel_SecTime)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_OpenActionPerformed
        // TODO add your handling code here:
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == jFileChooser.APPROVE_OPTION) {
            File file = jFileChooser.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            jTextArea_FileName.setText(file.getAbsolutePath());
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jMenuItem_OpenActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jButton_StartConcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_StartConcActionPerformed
        // TODO add your handling code here:
        long startTime = System.currentTimeMillis();
        
        if (!jTextArea_FileName.getText().equals("")) {
            try {
                int coresNum = 0;
                if (!jTextField_CoreNums.getText().equals("")) {
                    coresNum = Integer.parseInt(jTextField_CoreNums.getText());
                } else {
                    coresNum = Runtime.getRuntime().availableProcessors();
                }
                
                int eachPages = 0;
                int[] cores = new int[coresNum];
                MyThread[] threads = new MyThread[coresNum];
                PDDocument doc;
                doc = PDDocument.load(new File(jTextArea_FileName.getText()));
                int count = doc.getNumberOfPages();
                int count2 = doc.getNumberOfPages();

                jTextArea_Conc.setText("You have " 
                        + String.valueOf(coresNum)
                        + " cores in your computer."
                        + "\nSo I'll create "
                        + String.valueOf(coresNum)
                        + " threads.");

                for (int i = 0; i < cores.length; i++) {
                    int y = i+1;
                    cores[i] = y;
                }

                if (count%2 == 0) {
                    eachPages = count / coresNum;
                } else if(count%2 != 0) {
                    count = count+1;
                    eachPages = count / coresNum;
                }

                for (int core : cores) {
                    MyThread thread = new MyThread();
                    thread.setThNumber(core);
                    thread.setDoc(jTextArea_FileName.getText());
                    thread.setWord(jTextField_Find.getText());
                    thread.setTime(0);

                    for (int core2 : cores) {
                        if (core2 == core) {
                            if (core2 == 1) {
                                thread.setStartPage(1);
                                thread.setStopPage(eachPages);
                                eachPages += eachPages;
                            } else {
                                thread.setStartPage(eachPages-(count/coresNum));
                                thread.setStopPage(eachPages);
                                eachPages += (count/coresNum);
                            }
                        }
                    }

                    threads[core-1] = thread;
                    thread.start();
                }

                jTextArea_Conc.setText(jTextArea_Conc.getText()
                        + "\nThis book has "
                        + String.valueOf(count2)
                        + " pages.");

                doc.close();
                
                SetInfo(threads, jTextArea_Conc.getText());

            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
                
            long estimatedTime = System.currentTimeMillis() - startTime;
            jLabel_ConcTime.setText(String.valueOf(estimatedTime / 1000) + " sec.");
            
        } else {
            jTextArea_Conc.setText("Please select a file first!.");
        }
    }//GEN-LAST:event_jButton_StartConcActionPerformed

    private void jButton_StartSecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_StartSecActionPerformed
        // TODO add your handling code here:
        long startTime = System.currentTimeMillis();
        
        if (!jTextArea_FileName.getText().equals("")) {
            int count = 0;
            boolean isEmpty = true;
            
            try {
                PDDocument doc;
                doc = PDDocument.load(new File(jTextArea_FileName.getText()));
                
                int pages = doc.getNumberOfPages();
                jTextArea_Sec.setText("This book has "
                        + String.valueOf(pages)
                        + " pages.");
                
                PDFTextStripper pdfStripper = new PDFTextStripper();
                
                for (int i = 1; i <= pages; i++) {
                    pdfStripper.setStartPage(i);
                    pdfStripper.setEndPage(i);
                    String text = pdfStripper.getText(doc);
                    
                    if (!jTextField_Find.getText().equals("")) {
                        isEmpty = false;
                        String[] texts = text.split(" ");
                        
                        for (String word : texts) {
                            if (word.equals(jTextField_Find.getText())) {
                                count++;
                            }
                        }
                    } else {
                        String[] texts = text.split(" ");
                        
                        for (String word : texts) {
                            count++;
                        }
                    }
                }
                
                if (isEmpty) {
                    jTextArea_Sec.setText(jTextArea_Sec.getText() 
                        + "\n" 
                        + "This book has "
                        + String.valueOf(count)
                        + " words.");
                } else {
                    jTextArea_Sec.setText(jTextArea_Sec.getText() 
                        + "\n" 
                        + "The word '" 
                        + jTextField_Find.getText()
                        + "' is "
                        + String.valueOf(count)
                        + " times.");
                }
                
                doc.close();
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            long estimatedTime = System.currentTimeMillis() - startTime;
            jLabel_SecTime.setText(String.valueOf(estimatedTime / 1000) + " sec.");
            
        } else {
            jTextArea_Sec.setText("Please select a file first!.");
        }
    }//GEN-LAST:event_jButton_StartSecActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    
    private void SetInfo (MyThread[] threads, String text){
        jTextArea_Conc.setText(text);
        int count = 0;
        for (MyThread thread : threads) {
            // jTextArea_Conc.setText(text);
            if (thread.isAlive()) {
                synchronized(this){
                    try {
                        wait(10);
                        SetInfo(threads, text);
                        break;
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                jTextArea_Conc.setText(jTextArea_Conc.getText()
                        + "\nThread " 
                        + thread.getThNumber()
                        + " has ended in "
                        + thread.getTime()
                        + " sec.");
                
                if (!thread.getWord().equals("")) {
                    jTextArea_Conc.setText(jTextArea_Conc.getText()
                            + "\nThread " 
                            + thread.getThNumber()
                            + " has counted the word '"
                            + thread.getWord()
                            + "' "
                            + thread.getWordAppearance()
                            + " times.");
                } else {
                    jTextArea_Conc.setText(jTextArea_Conc.getText()
                            + "\nThread " 
                            + thread.getThNumber()
                            + " has counted "
                            + thread.getWordAppearance()
                            + " words");
                }
                
                count = count + thread.getWordAppearance();
            }
        }
        
        jTextArea_Conc.setText(jTextArea_Conc.getText()
                + "\nThis books has "
                + count
                + " words.");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_StartConc;
    private javax.swing.JButton jButton_StartSec;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel_Conc;
    private javax.swing.JLabel jLabel_ConcTime;
    private javax.swing.JLabel jLabel_Sec;
    private javax.swing.JLabel jLabel_SecTime;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItem_Open;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea_Conc;
    private javax.swing.JTextArea jTextArea_FileName;
    private javax.swing.JTextArea jTextArea_Sec;
    private javax.swing.JTextField jTextField_CoreNums;
    private javax.swing.JTextField jTextField_Find;
    // End of variables declaration//GEN-END:variables
}
